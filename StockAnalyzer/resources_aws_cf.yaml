AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for creating a complete ECS/ECR stack running on Fargate"
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: "${TaskExecutionRole}"
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: "AppContainer"
          Image: "${ECRImageURI}"
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: ${ContainerPort}
              Protocol: tcp
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: AppCluster
  FargateAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: NlpFargateAlb
      Subnets:
        - ${subnet1}
        - ${subnet2}
        - ${subnet3}
      Type: application
      SecurityGroups:
        - !GetAtt FargateAlbSG.GroupId
  FargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: NlpFargateTargetGroup
      VpcId: ${vpcid}
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /actuator/
      TargetType: ip
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NlpFargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref NlpFargateAlb
      Port: 80
      Protocol: HTTP
  FargateAlbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: FargateAlbSG
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'